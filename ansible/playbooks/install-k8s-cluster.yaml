## ----------------------------------------------------------------------------
## ..:: k8s Cluster isntallation ::..
## ----------------------------------------------------------------------------

## Updading Ubuntu distribution on all k8s boxes
- hosts: k8s_allnodes
  remote_user: root
  tasks:

    - name: Set timezone to Europe/Rome
      timezone:
        name: Europe/Rome

    - name: Remove resolv.conf link
      file:
        path: /etc/resolv.conf
        state: absent

    - name: Copy resolv.conf file on cluster's master and nodes
      copy:
        src: resolv.conf
        dest: /etc/resolv.conf

    - name: Enable rc.local
      template:
        src: rc.local.j2
        dest: /etc/rc.local
        mode: 0700

    - name: setting hostname
      template:
        src: hostname.j2
        dest: /etc/hostname

    - name: Copy hosts file
      template:
        src: hosts.j2
        dest: /etc/hosts

    - name: Upgrade all packages to the latest version
      apt:
        update_cache: yes
        upgrade: dist

    - name: Installing needed software
      apt:
        pkg:
        - nfs-client
        
    ## Installing Docker CE
    - name: adding Docker apt-key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: adding Docker's APT repository
      apt_repository:
       repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
       state: present
       filename: 'docker-ce'

    - name: installing docker-ce
      apt:
        name: docker-ce
        state: present
        update_cache: true

    - name: Adding ububtu user to docekr group
      command: usermod -aG docker ubuntu

    ## Installing Kubernetes Environment
    - name: add Kubernetes apt-key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: add Kubernetes' APT repository
      apt_repository:
       repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
       state: present
       filename: 'kubernetes'

    - name: install kubelet
      apt:
        name: kubelet=1.18.15-00
        state: present
        update_cache: true

    - name: install kubeadm
      apt:
        name: kubeadm=1.18.15-00
        state: present

    - name: install kubectl
      apt:
        name: kubectl=1.18.15-00
        state: present

    - name: Remove resolv.conf link
      file:
        path: /etc/resolv.conf
        state: absent

    - name: Copy resolv.conf file on cluster's master and nodes
      copy:
        src: resolv.conf
        dest: /etc/resolv.conf

    - name: Enable rc.local
      template:
        src: rc.local.j2
        dest: /etc/rc.local
        mode: 0700

    - name: setting hostname
      template:
        src: hostname.j2
        dest: /etc/hostname

    - name: Deploy registry certificates on all nodes - creating directory
      file:
        path: /etc/docker/certs.d/registry.f5-udf.com:5000/
        state: directory
        
    - name: Deploy registry certificates on all nodes - copying certificate
      copy:
        src: files/docker-files/registry.crt
        dest: /etc/docker/certs.d/registry.f5-udf.com:5000/

    - name: Restart servers in k8s cluster
      reboot:
        msg: "Reboot initiated by Ansible"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami

## ----------------------------------------------------------------------------
## ..:: Initialize k8s-master and join k8s_nodes ::..
## ----------------------------------------------------------------------------

- hosts: k8s-master
  remote_user: root
  tasks:

    - name: k8s Cluster initialization
      shell: kubeadm init --apiserver-advertise-address {{ secondNetIf_ip }} --pod-network-cidr 10.244.0.0/16 --token-ttl 0 >> cluster_initialized.txt
      args:
        creates: cluster_initialized.txt

    - name: create .kube directory for user root
      become: yes
      remote_user: root
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: copy admin.conf to user's kube config for user root
      remote_user: root
      copy:
        src: /etc/kubernetes/admin.conf
        dest: $HOME/.kube/config
        remote_src: yes

    - name: create .kube directory for user ubuntu
      become: yes
      remote_user: root
      file:
        path: /home/ubuntu/.kube
        state: directory
        mode: 0755
        owner: ubuntu

    - name: copy admin.conf to user's kube config for user ubuntu
      remote_user: root
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu

    - name: create .kube directory for user ubuntu on infra-server (Ansible controller)
      local_action:
        module: file
        path: /home/ubuntu/.kube
        state: directory
        mode: 0755
        owner: ubuntu

    - name: copy admin.conf to user's kube config for user ubuntu on infra-server (Ansible controller)
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config-k8s
        flat: yes

    - name: get join command
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: set join command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"

- hosts: k8s_nodes
  become: yes
  remote_user: root
  tasks:
    - name: join cluster
      shell: "{{ hostvars['k8s-master'].join_command }} >> node_joined.txt"
      args:
        creates: node_joined.txt

## ----------------------------------------------------------------------------
## ..:: CALICO OVERLAY NETWORK INSTALLATION ::..
## ----------------------------------------------------------------------------

- hosts: infra-server
  become: yes
  remote_user: root
  tasks:

    ## Installing CALICO Overlay network 
    - name: Downloading -Calico- Manifest file
      get_url:
        url: https://docs.projectcalico.org/manifests/calico.yaml
        dest: /home/ubuntu/calico-k8s.yaml
        mode: '0644'

    - name: Configure Calico to use 10.244.0.0 POD Network - Step 1
      lineinfile: 
        dest: /home/ubuntu/calico-k8s.yaml
        regexp: 'CALICO_IPV4POOL_CIDR' 
        line: '            - name: CALICO_IPV4POOL_CIDR'
        backrefs: yes

    - name: Configure Calico to use 10.244.0.0 POD Network - Step 2
      lineinfile: 
        dest: /home/ubuntu/calico-k8s.yaml
        regexp: '192.168.0.0/16' 
        line: '              value: "10.244.0.0/16"'
        backrefs: yes

    - name: Apply Calico Overlay Networking Configuration
      become: true
      become_user: ubuntu
      command: /bin/bash -c "export KUBECONFIG=/home/ubuntu/.kube/config-k8s ; kubectl apply -f ~/calico-k8s.yaml"

    ## Configuring CALICO for BGP with BIG-IP
    - name: Creating /etc/calico directory
      file:
        path: /etc/calico
        state: directory

    - name: Downloading calicoctl executable installation file 
      get_url:
        url: https://github.com/projectcalico/calicoctl/releases/download/v3.17.1/calicoctl
        dest: /usr/local/bin
        mode: '0755'
 
    - name: Copy calico configuration files  
      copy:
        src: k8s-manifests/calico-overlay/{{ item }}
        dest: /etc/calico/
      with_items:
        - calicoctl-k8s.cfg
        - bgpConfiguration-k8s.yaml

    - name: Copying BIGIP BGP Peer configuration file
      template:
        src: bigipPeerConfiguration-k8s.yaml.j2
        dest: /etc/calico/bigipPeerConfiguration-k8s.yaml

    - name: Configuring Calico BGP on k8s cluster
      become: yes
      become_user: ubuntu
      command: calicoctl create -c /etc/calico/calicoctl-k8s.cfg  -f /etc/calico/bgpConfiguration-k8s.yaml

    - name: Adding BGIP bigip-security as a BGPPeer
      become: yes
      become_user: ubuntu
      command: calicoctl create -c /etc/calico/calicoctl-k8s.cfg -f /etc/calico/bigipPeerConfiguration-k8s.yaml

    - name: Copy k8s-manifests files  
      copy:
        src: k8s-manifests
        dest: /home/ubuntu
        owner: ubuntu
        group: ubuntu